// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: attendance.proto

/*
	Package modals is a generated protocol buffer package.

	It is generated from these files:
		attendance.proto

	It has these top-level messages:
		Attendance
		Records
*/
package modals

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "github.com/gogo/protobuf/gogoproto"
import _ "github.com/golang/protobuf/ptypes/timestamp"

import time "time"

import types "github.com/gogo/protobuf/types"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf
var _ = time.Kitchen

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

type Rank int32

const (
	Rank_fail Rank = 0
	Rank_fair Rank = 1
	Rank_good Rank = 2
)

var Rank_name = map[int32]string{
	0: "fail",
	1: "fair",
	2: "good",
}
var Rank_value = map[string]int32{
	"fail": 0,
	"fair": 1,
	"good": 2,
}

func (x Rank) String() string {
	return proto.EnumName(Rank_name, int32(x))
}
func (Rank) EnumDescriptor() ([]byte, []int) { return fileDescriptorAttendance, []int{0} }

type Attendance struct {
	Pycid    string     `protobuf:"bytes,1,opt,name=pycid,proto3" json:"pycid,omitempty"`
	CheckIn  *time.Time `protobuf:"bytes,2,opt,name=check_in,json=checkIn,stdtime" json:"check_in,omitempty"`
	CheckOut *time.Time `protobuf:"bytes,3,opt,name=check_out,json=checkOut,stdtime" json:"check_out,omitempty"`
	Rank     Rank       `protobuf:"varint,4,opt,name=rank,proto3,enum=attendance.Rank" json:"rank,omitempty"`
}

func (m *Attendance) Reset()                    { *m = Attendance{} }
func (m *Attendance) String() string            { return proto.CompactTextString(m) }
func (*Attendance) ProtoMessage()               {}
func (*Attendance) Descriptor() ([]byte, []int) { return fileDescriptorAttendance, []int{0} }

func (m *Attendance) GetPycid() string {
	if m != nil {
		return m.Pycid
	}
	return ""
}

func (m *Attendance) GetCheckIn() *time.Time {
	if m != nil {
		return m.CheckIn
	}
	return nil
}

func (m *Attendance) GetCheckOut() *time.Time {
	if m != nil {
		return m.CheckOut
	}
	return nil
}

func (m *Attendance) GetRank() Rank {
	if m != nil {
		return m.Rank
	}
	return Rank_fail
}

type Records struct {
	Records []*Attendance `protobuf:"bytes,1,rep,name=records" json:"records,omitempty"`
}

func (m *Records) Reset()                    { *m = Records{} }
func (m *Records) String() string            { return proto.CompactTextString(m) }
func (*Records) ProtoMessage()               {}
func (*Records) Descriptor() ([]byte, []int) { return fileDescriptorAttendance, []int{1} }

func (m *Records) GetRecords() []*Attendance {
	if m != nil {
		return m.Records
	}
	return nil
}

func init() {
	proto.RegisterType((*Attendance)(nil), "attendance.Attendance")
	proto.RegisterType((*Records)(nil), "attendance.Records")
	proto.RegisterEnum("attendance.Rank", Rank_name, Rank_value)
}
func (this *Attendance) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Attendance)
	if !ok {
		that2, ok := that.(Attendance)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Pycid != that1.Pycid {
		return false
	}
	if that1.CheckIn == nil {
		if this.CheckIn != nil {
			return false
		}
	} else if !this.CheckIn.Equal(*that1.CheckIn) {
		return false
	}
	if that1.CheckOut == nil {
		if this.CheckOut != nil {
			return false
		}
	} else if !this.CheckOut.Equal(*that1.CheckOut) {
		return false
	}
	if this.Rank != that1.Rank {
		return false
	}
	return true
}
func (this *Records) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Records)
	if !ok {
		that2, ok := that.(Records)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.Records) != len(that1.Records) {
		return false
	}
	for i := range this.Records {
		if !this.Records[i].Equal(that1.Records[i]) {
			return false
		}
	}
	return true
}
func (m *Attendance) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Attendance) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Pycid) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintAttendance(dAtA, i, uint64(len(m.Pycid)))
		i += copy(dAtA[i:], m.Pycid)
	}
	if m.CheckIn != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintAttendance(dAtA, i, uint64(types.SizeOfStdTime(*m.CheckIn)))
		n1, err := types.StdTimeMarshalTo(*m.CheckIn, dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n1
	}
	if m.CheckOut != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintAttendance(dAtA, i, uint64(types.SizeOfStdTime(*m.CheckOut)))
		n2, err := types.StdTimeMarshalTo(*m.CheckOut, dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n2
	}
	if m.Rank != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintAttendance(dAtA, i, uint64(m.Rank))
	}
	return i, nil
}

func (m *Records) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Records) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Records) > 0 {
		for _, msg := range m.Records {
			dAtA[i] = 0xa
			i++
			i = encodeVarintAttendance(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func encodeVarintAttendance(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func NewPopulatedAttendance(r randyAttendance, easy bool) *Attendance {
	this := &Attendance{}
	this.Pycid = string(randStringAttendance(r))
	if r.Intn(10) != 0 {
		this.CheckIn = types.NewPopulatedStdTime(r, easy)
	}
	if r.Intn(10) != 0 {
		this.CheckOut = types.NewPopulatedStdTime(r, easy)
	}
	this.Rank = Rank([]int32{0, 1, 2}[r.Intn(3)])
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedRecords(r randyAttendance, easy bool) *Records {
	this := &Records{}
	if r.Intn(10) != 0 {
		v1 := r.Intn(5)
		this.Records = make([]*Attendance, v1)
		for i := 0; i < v1; i++ {
			this.Records[i] = NewPopulatedAttendance(r, easy)
		}
	}
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

type randyAttendance interface {
	Float32() float32
	Float64() float64
	Int63() int64
	Int31() int32
	Uint32() uint32
	Intn(n int) int
}

func randUTF8RuneAttendance(r randyAttendance) rune {
	ru := r.Intn(62)
	if ru < 10 {
		return rune(ru + 48)
	} else if ru < 36 {
		return rune(ru + 55)
	}
	return rune(ru + 61)
}
func randStringAttendance(r randyAttendance) string {
	v2 := r.Intn(100)
	tmps := make([]rune, v2)
	for i := 0; i < v2; i++ {
		tmps[i] = randUTF8RuneAttendance(r)
	}
	return string(tmps)
}
func randUnrecognizedAttendance(r randyAttendance, maxFieldNumber int) (dAtA []byte) {
	l := r.Intn(5)
	for i := 0; i < l; i++ {
		wire := r.Intn(4)
		if wire == 3 {
			wire = 5
		}
		fieldNumber := maxFieldNumber + r.Intn(100)
		dAtA = randFieldAttendance(dAtA, r, fieldNumber, wire)
	}
	return dAtA
}
func randFieldAttendance(dAtA []byte, r randyAttendance, fieldNumber int, wire int) []byte {
	key := uint32(fieldNumber)<<3 | uint32(wire)
	switch wire {
	case 0:
		dAtA = encodeVarintPopulateAttendance(dAtA, uint64(key))
		v3 := r.Int63()
		if r.Intn(2) == 0 {
			v3 *= -1
		}
		dAtA = encodeVarintPopulateAttendance(dAtA, uint64(v3))
	case 1:
		dAtA = encodeVarintPopulateAttendance(dAtA, uint64(key))
		dAtA = append(dAtA, byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)))
	case 2:
		dAtA = encodeVarintPopulateAttendance(dAtA, uint64(key))
		ll := r.Intn(100)
		dAtA = encodeVarintPopulateAttendance(dAtA, uint64(ll))
		for j := 0; j < ll; j++ {
			dAtA = append(dAtA, byte(r.Intn(256)))
		}
	default:
		dAtA = encodeVarintPopulateAttendance(dAtA, uint64(key))
		dAtA = append(dAtA, byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)))
	}
	return dAtA
}
func encodeVarintPopulateAttendance(dAtA []byte, v uint64) []byte {
	for v >= 1<<7 {
		dAtA = append(dAtA, uint8(uint64(v)&0x7f|0x80))
		v >>= 7
	}
	dAtA = append(dAtA, uint8(v))
	return dAtA
}
func (m *Attendance) Size() (n int) {
	var l int
	_ = l
	l = len(m.Pycid)
	if l > 0 {
		n += 1 + l + sovAttendance(uint64(l))
	}
	if m.CheckIn != nil {
		l = types.SizeOfStdTime(*m.CheckIn)
		n += 1 + l + sovAttendance(uint64(l))
	}
	if m.CheckOut != nil {
		l = types.SizeOfStdTime(*m.CheckOut)
		n += 1 + l + sovAttendance(uint64(l))
	}
	if m.Rank != 0 {
		n += 1 + sovAttendance(uint64(m.Rank))
	}
	return n
}

func (m *Records) Size() (n int) {
	var l int
	_ = l
	if len(m.Records) > 0 {
		for _, e := range m.Records {
			l = e.Size()
			n += 1 + l + sovAttendance(uint64(l))
		}
	}
	return n
}

func sovAttendance(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozAttendance(x uint64) (n int) {
	return sovAttendance(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Attendance) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAttendance
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Attendance: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Attendance: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pycid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAttendance
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAttendance
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Pycid = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CheckIn", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAttendance
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAttendance
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.CheckIn == nil {
				m.CheckIn = new(time.Time)
			}
			if err := types.StdTimeUnmarshal(m.CheckIn, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CheckOut", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAttendance
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAttendance
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.CheckOut == nil {
				m.CheckOut = new(time.Time)
			}
			if err := types.StdTimeUnmarshal(m.CheckOut, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Rank", wireType)
			}
			m.Rank = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAttendance
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Rank |= (Rank(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipAttendance(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAttendance
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Records) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAttendance
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Records: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Records: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Records", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAttendance
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAttendance
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Records = append(m.Records, &Attendance{})
			if err := m.Records[len(m.Records)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipAttendance(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAttendance
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipAttendance(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowAttendance
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowAttendance
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowAttendance
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthAttendance
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowAttendance
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipAttendance(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthAttendance = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowAttendance   = fmt.Errorf("proto: integer overflow")
)

func init() { proto.RegisterFile("attendance.proto", fileDescriptorAttendance) }

var fileDescriptorAttendance = []byte{
	// 324 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x90, 0xbd, 0x4e, 0xf3, 0x30,
	0x14, 0x86, 0xbf, 0xd3, 0xe6, 0xeb, 0x8f, 0x2b, 0xa1, 0xc8, 0x42, 0x28, 0xea, 0x10, 0xa2, 0xaa,
	0x43, 0x84, 0x44, 0x8a, 0xca, 0x58, 0x31, 0xd0, 0x8d, 0x09, 0x29, 0x62, 0x62, 0x41, 0xce, 0x4f,
	0xdd, 0x28, 0x89, 0x4f, 0x94, 0x38, 0x43, 0xef, 0x82, 0xcb, 0xe0, 0x12, 0xb8, 0x00, 0x06, 0x46,
	0xee, 0x00, 0xc8, 0x55, 0x30, 0xa2, 0xda, 0x2d, 0x29, 0x1b, 0xdb, 0x73, 0xec, 0xf7, 0x39, 0xc7,
	0xc7, 0xc4, 0x64, 0x52, 0xc6, 0x22, 0x62, 0x22, 0x8c, 0xbd, 0xa2, 0x44, 0x89, 0x94, 0xb4, 0x27,
	0xe3, 0x73, 0x9e, 0xc8, 0x75, 0x1d, 0x78, 0x21, 0xe6, 0x33, 0x8e, 0x1c, 0x67, 0x2a, 0x12, 0xd4,
	0x2b, 0x55, 0xa9, 0x42, 0x91, 0x56, 0xc7, 0x8b, 0x5f, 0xf1, 0x8c, 0x09, 0xde, 0x0a, 0x85, 0xdc,
	0x14, 0x71, 0x35, 0x93, 0x49, 0x1e, 0x57, 0x92, 0xe5, 0x45, 0x4b, 0x5a, 0x9e, 0xbc, 0x00, 0x21,
	0xd7, 0x3f, 0xa3, 0xe9, 0x31, 0xf9, 0x5f, 0x6c, 0xc2, 0x24, 0xb2, 0xc0, 0x01, 0x77, 0xe8, 0xeb,
	0x82, 0x2e, 0xc8, 0x20, 0x5c, 0xc7, 0x61, 0xfa, 0x90, 0x08, 0xab, 0xe3, 0x80, 0x3b, 0x9a, 0x8f,
	0x3d, 0x8e, 0xc8, 0xb3, 0xdd, 0xeb, 0x83, 0x7a, 0xe5, 0xdd, 0xed, 0x1b, 0x2f, 0x8d, 0xc7, 0xf7,
	0x53, 0xf0, 0xfb, 0xca, 0xb8, 0x11, 0xf4, 0x8a, 0x0c, 0xb5, 0x8c, 0xb5, 0xb4, 0xba, 0x7f, 0xb4,
	0xf5, 0xbc, 0xdb, 0x5a, 0xd2, 0x29, 0x31, 0x4a, 0x26, 0x52, 0xcb, 0x70, 0xc0, 0x3d, 0x9a, 0x9b,
	0xde, 0xc1, 0xcf, 0xf9, 0x4c, 0xa4, 0xbe, 0xba, 0x9d, 0x2c, 0x48, 0xdf, 0x8f, 0x43, 0x2c, 0xa3,
	0x8a, 0x5e, 0x90, 0x7e, 0xa9, 0xd1, 0x02, 0xa7, 0xeb, 0x8e, 0xe6, 0x27, 0x87, 0x4e, 0xbb, 0xab,
	0xbf, 0x8f, 0x9d, 0x4d, 0x89, 0xb1, 0x6d, 0x45, 0x07, 0xc4, 0x58, 0xb1, 0x24, 0x33, 0xff, 0xed,
	0xa8, 0x34, 0x61, 0x4b, 0x1c, 0x31, 0x32, 0x3b, 0x4b, 0xe7, 0xeb, 0xd3, 0x86, 0xa7, 0xc6, 0x86,
	0xe7, 0xc6, 0x86, 0xd7, 0xc6, 0x86, 0xb7, 0xc6, 0x86, 0x8f, 0xc6, 0x86, 0xfb, 0x5e, 0x8e, 0x11,
	0xcb, 0xaa, 0xa0, 0xa7, 0xd6, 0xb9, 0xfc, 0x0e, 0x00, 0x00, 0xff, 0xff, 0x50, 0xb9, 0x4a, 0x1f,
	0xde, 0x01, 0x00, 0x00,
}
