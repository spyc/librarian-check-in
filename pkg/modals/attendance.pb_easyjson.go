// Code generated by easyjson for marshaling/unmarshaling. DO NOT EDIT.

package modals

import (
	json "encoding/json"
	easyjson "github.com/mailru/easyjson"
	jlexer "github.com/mailru/easyjson/jlexer"
	jwriter "github.com/mailru/easyjson/jwriter"
	time "time"
)

// suppress unused package warning
var (
	_ *json.RawMessage
	_ *jlexer.Lexer
	_ *jwriter.Writer
	_ easyjson.Marshaler
)

func easyjson5170dbe5DecodeLibraryPycEduHkAttendancePkgModals(in *jlexer.Lexer, out *Attendance) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "pycid":
			out.Pycid = string(in.String())
		case "check_in":
			if in.IsNull() {
				in.Skip()
				out.CheckIn = nil
			} else {
				if out.CheckIn == nil {
					out.CheckIn = new(time.Time)
				}
				if data := in.Raw(); in.Ok() {
					in.AddError((*out.CheckIn).UnmarshalJSON(data))
				}
			}
		case "check_out":
			if in.IsNull() {
				in.Skip()
				out.CheckOut = nil
			} else {
				if out.CheckOut == nil {
					out.CheckOut = new(time.Time)
				}
				if data := in.Raw(); in.Ok() {
					in.AddError((*out.CheckOut).UnmarshalJSON(data))
				}
			}
		case "rank":
			out.Rank = Rank(in.Int32())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson5170dbe5EncodeLibraryPycEduHkAttendancePkgModals(out *jwriter.Writer, in Attendance) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Pycid != "" {
		const prefix string = ",\"pycid\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Pycid))
	}
	if in.CheckIn != nil {
		const prefix string = ",\"check_in\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Raw((*in.CheckIn).MarshalJSON())
	}
	if in.CheckOut != nil {
		const prefix string = ",\"check_out\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Raw((*in.CheckOut).MarshalJSON())
	}
	if in.Rank != 0 {
		const prefix string = ",\"rank\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int32(int32(in.Rank))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Attendance) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson5170dbe5EncodeLibraryPycEduHkAttendancePkgModals(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Attendance) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson5170dbe5EncodeLibraryPycEduHkAttendancePkgModals(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Attendance) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson5170dbe5DecodeLibraryPycEduHkAttendancePkgModals(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Attendance) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson5170dbe5DecodeLibraryPycEduHkAttendancePkgModals(l, v)
}
